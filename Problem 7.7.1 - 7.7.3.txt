/* Problem 7.7.1. Calculate the single premium payable by a 30 years old person for a single claim of 10000$ over 35 years 
if the person survives. The annual interest percent is 6%.
   Problem 7.7.2. Calculate the single premium payable by a 30 years old person for a whole life annuity-immediate of 12000RON 
per year. The annual interest percent is 8%.
    Problem 7.7.3. Calculate the single premium payable by a 30 years old person for a 35-year deferred whole life annuity-immediate of 12000RON per
year. The annual interest percent is 8%.
*/

 let age: number[] = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
    76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];

let lxM: number[] = [
    100000, 99930, 99860, 99760, 99654, 99543, 99425, 99302, 99173, 99032, 98880, 98716, 98540, 98353, 98144, 97914,
    97664, 97392, 97100, 96754, 96356, 95905, 95402, 94849, 94231, 93548, 92804, 91998, 91133, 90209, 89228, 88191,
    87101, 85960, 84731, 83417, 82024, 80556, 79017, 77374, 75633, 73803, 71891, 69907, 67814, 65625, 63353, 61011,
    58614, 56111, 53524, 50875, 48183, 45471, 42371, 38981, 35399, 31727, 28059, 24483, 21072, 17886, 14970, 12352,
    10045, 8050, 6356, 4942, 3785, 2854, 2118, 1546, 1111, 785, 545, 372, 250, 165, 107, 68, 42, 26, 15
];

let lxF: number[] = [
    100000, 99960, 99920, 99880, 99838, 99794, 99748, 99700, 99651, 99597, 99539, 99477, 99412, 99342, 99261, 99167,
    99062, 98945, 98817, 98670, 98507, 98325, 98127, 97911, 97670, 97404, 97114, 96799, 96461, 96088, 95683, 95245,
    94774, 94272, 93717, 93112, 92456, 91752, 91000, 90182, 89302, 88361, 87361, 86304, 85125, 83829, 82423, 80911,
    79301, 77493, 75501, 73342, 71032, 68588, 65336, 61387, 56877, 51959, 46789, 41524, 36311, 31280, 26538, 22170,
    18232, 14757, 11751, 9205, 7091, 5370, 3996, 2922, 2099, 1480, 1024, 696, 463, 303, 194, 122, 75, 45, 26
];

class Person {
    private age: number = 0;
    private gender: string;

    getAge(): number {
        return this.age;
    }

    getGender(): string {
        return this.gender;
    }

    constructor(currentAge: number, gender: string) {
        this.age = currentAge;
        this.gender = gender;
    }

    computeNumberOfSurvivors(years: number, gender: string): number {
        let index: number = age.indexOf(years);

        if (index === -1) {
            throw new Error(`Invalid age: ${age}. No such age found in age array.`);
        }

        if (gender === "male") {
            return lxM[index];
        }
        return lxF[index];
    }
}

class Insurance {

  static calculateSinglePremiumPayable(person: Person, claimAmount: number, yearsToSurvive: number, interestRate: number): number {
        //Folosesc formula de la (7.1) si (7.2)
        // v = annual discounting factor v = 1/(1 +i), unde i este dobanda

        let futureAge: number = person.getAge() + yearsToSurvive;
        let currentAgeSurvivors = person.computeNumberOfSurvivors(person.getAge(), person.getGender());
        let futureAgeSurvivors = person.computeNumberOfSurvivors(futureAge, person.getGender());

        //Rate of interest
        let v = 1 / (1 + interestRate);
        let Dx = v ** person.getAge() * currentAgeSurvivors;
        let Dxn = v ** futureAge * futureAgeSurvivors;

        let Ex = Dxn / Dx;
        let premium = claimAmount * Ex;

        return premium;
    }

    static calculateWholeLifeAnnuityPayable(person: Person, annuityAmount: number, interestRate: number): number {
        //folosesc (7.4) si (7.5) si (7.2) si (7.3.1 example)
        let currentAge = person.getAge();
        let gender = person.getGender();
        let v = 1 / (1 + interestRate);

        let Dx = 0;
        let Nx1 = 0;

        for (let age = currentAge; age <= 100; age++) {
            let lx = person.computeNumberOfSurvivors(age, gender);
            if(person.getAge() === age) {
            Dx += v ** age * lx;
            }
            if (age >= currentAge + 1) {
                Nx1 += v ** age * lx;
            }
        }

        let ax = Nx1 / Dx;
        let premium = annuityAmount * ax;
    //Folosit Example 7.3.1 ca sa ma verific
        return premium;
    }

    static calculateDeferredWholeLifeAnnuityPayable(person: Person, annuityAmount: number, defermentYears: number, interestRate: number): number {
        //Folosesc (7.6) si exemplele anterioare

        let currentAge = person.getAge();
        let r =  defermentYears;
        let gender = person.getGender();
        let v = 1 / (1 + interestRate);

        let Dx = 0;
        let Nxr1 = 0;

        for (let age = currentAge; age <= 100; age++) {
            let lx = person.computeNumberOfSurvivors(age, gender);
            if (person.getAge() === age) {
                Dx += v ** age * lx;
            }
            if (age >= currentAge + r + 1) {
                Nxr1 += v ** age * lx;
            }
        }

        let rax = Nxr1 / Dx;
        let premium = annuityAmount * rax;

        return premium;
    }
}

// Example 7.2.1.
let singlePremium = Insurance.calculateSinglePremiumPayable(new Person(44, "female"), 25000, 18, 0.10);
console.log(`Single Premium Payment value is: ${singlePremium.toFixed(2)}`);

// Example 7.3.1.
let wholeLifeAnnuityPremium = Insurance.calculateWholeLifeAnnuityPayable(new Person(49, "male"), 2000, 0.10);
console.log(`Whole Life Annuity Payment value is: ${wholeLifeAnnuityPremium.toFixed(2)} RON`);

// Example 7.3.2.
let deferredWholeLifeAnnuityPremium = Insurance.calculateDeferredWholeLifeAnnuityPayable(new Person(43, "female"), 500, 17, 0.10);
console.log(`Deferred Whole Life Annuity Payment value is: ${deferredWholeLifeAnnuityPremium.toFixed(2)} RON`);