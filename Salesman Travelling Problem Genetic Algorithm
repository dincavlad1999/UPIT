const cities: string[] = ["1", "2", "3", "4"];
const roadsData: { startNode: string; endNode: string; edgeWeight: number }[] = [
    { startNode: "1", endNode: "2", edgeWeight: 10 },
    { startNode: "1", endNode: "4", edgeWeight: 20 },
    { startNode: "1", endNode: "3", edgeWeight: 15 },
    { startNode: "2", endNode: "1", edgeWeight: 10 },
    { startNode: "2", endNode: "4", edgeWeight: 25 },
    { startNode: "2", endNode: "3", edgeWeight: 35 },
    { startNode: "3", endNode: "1", edgeWeight: 15 },
    { startNode: "3", endNode: "4", edgeWeight: 30 },
    { startNode: "3", endNode: "2", edgeWeight: 35 },
    { startNode: "4", endNode: "1", edgeWeight: 20 },
    { startNode: "4", endNode: "2", edgeWeight: 25 },
    { startNode: "4", endNode: "3", edgeWeight: 30 },
];

class Graph {
    private nodes: string[];
    private adjacencyList: { [key: string]: { [key: string]: number } };

    constructor() {
        this.nodes = [];
        this.adjacencyList = {};
    }

    addNode(node: string) {
        if (!this.nodes.includes(node)) {
            this.nodes.push(node);
            this.adjacencyList[node] = {};
        }
    }

    addEdge(startNode: string, endNode: string, edgeWeight: number) {
            this.adjacencyList[startNode][endNode] = edgeWeight;
    }

    getNodes(): string[] {
        return this.nodes;
    }

    getAdjacencyList(): { [key: string]: { [key: string]: number } } {
        return this.adjacencyList;
    }

    getTotalWeight(): number {
        let totalWeight: number = 0;
        for (let index = 0; index < this.nodes.length - 1; index++) {
            const current = this.nodes[index];
            const next = this.nodes[index + 1];
            if (this.adjacencyList[current][next] !== undefined) {
                totalWeight += this.adjacencyList[current][next];
            } else {
                return Infinity; // Path is incomplete
            }
        }
        // Add weight for returning to the starting node to complete the cycle
        if (this.adjacencyList[this.nodes[this.nodes.length - 1]][this.nodes[0]] !== undefined) {
            totalWeight += this.adjacencyList[this.nodes[this.nodes.length - 1]][this.nodes[0]];
        } else {
            return Infinity;
        }
        return totalWeight;
    }
}

class TravellingSalesman {
    private population: Graph[] = [];
    private crossoverRate: number = 0.7;
    private mutationRate: number = 0.1;

    initializeFirstGeneration(populationSize: number): void {
        for (let i = 0; i < populationSize; i++) {
            let graph = new Graph();
            let shuffledCities = this.shuffleArray([...cities]);
            for (let city of shuffledCities) {
                graph.addNode(city);
            }
            for (let edgeData of roadsData) {
                graph.addEdge(edgeData.startNode, edgeData.endNode, edgeData.edgeWeight);
            }
            this.population.push(graph);
        }
    }

    private shuffleArray(array: string[]): string[] {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    private getRandomNumber(max: number): number {
        return Math.floor(Math.random() * max);
    }

    private fitness(graph: Graph): number {
        return 1 / graph.getTotalWeight(); // Inverse of total weight
    }

    private selectParentTournament(tournamentSize: number): Graph {
        let tournamentParticipants = [];
        for (let i = 0; i < tournamentSize; i++) {
            tournamentParticipants.push(this.population[this.getRandomNumber(this.population.length)]);
        }
        return tournamentParticipants.reduce((best, participant) =>
            this.fitness(participant) > this.fitness(best) ? participant : best
        );
    }

    crossover(parent1: Graph, parent2: Graph): Graph {
        let child = new Graph();
        let midpoint = Math.floor(parent1.getNodes().length / 2);
        let startNodes = parent1.getNodes().slice(0, midpoint);
        let endNodes = parent2.getNodes().filter(node => !startNodes.includes(node));
        let combinedNodes = startNodes.concat(endNodes);
        combinedNodes.forEach(node => child.addNode(node));
        for (let edgeData of roadsData) {
            child.addEdge(edgeData.startNode, edgeData.endNode, edgeData.edgeWeight);
        }
        return child;
    }

    mutation(graph: Graph): Graph {
        let mutatedGraph = new Graph();
        let nodes = graph.getNodes();
        let index1 = this.getRandomNumber(nodes.length);
        let index2 = this.getRandomNumber(nodes.length);
        [nodes[index1], nodes[index2]] = [nodes[index2], nodes[index1]];
        nodes.forEach(node => mutatedGraph.addNode(node));
        for (let edgeData of roadsData) {
            mutatedGraph.addEdge(edgeData.startNode, edgeData.endNode, edgeData.edgeWeight);
        }
        return mutatedGraph;
    }

    evolvePopulation(): void {
        let newGeneration: Graph[] = [];
        for (let i = 0; i < this.population.length; i++) {
            let parent1 = this.selectParentTournament(2);
            let parent2 = this.selectParentTournament(2);
            let child: Graph;
            if (Math.random() < this.crossoverRate) {
                child = this.crossover(parent1, parent2);
            } else {
                child = parent1;
            }
            if (Math.random() < this.mutationRate) {
                child = this.mutation(child);
            }
            newGeneration.push(child);
        }
        this.population = newGeneration;
    }

    stopEvolution(startingPoint: string): boolean {
        let validSolution = this.population.some(graph => this.checkGraphValidity(graph, startingPoint));
        return validSolution;
    }

    private checkGraphValidity(graph: Graph, startingPoint: string): boolean {
        let nodes = graph.getNodes();
        if (nodes.length !== cities.length) return false;
        if (nodes[0] !== startingPoint) return false;
        if (graph.getTotalWeight() === Infinity) return false;
        return true;
    }

    getBestRoad(): Graph {
        return this.population.reduce((best, graph) =>
            this.fitness(graph) > this.fitness(best) ? graph : best
        );
    }
}

const salesman = new TravellingSalesman();
salesman.initializeFirstGeneration(10);
while (!salesman.stopEvolution("1")) {
    salesman.evolvePopulation();
}
console.log("Best Road:", salesman.getBestRoad().getTotalWeight());
