class Graph{
   private nodes: string[];
   private adjacencyList: {[key: string]: {[key: string]: number}};
   private terminalNodes: string[];
   private originalTerminalNodes: string[];
   private adjacencyListTerminalNodes: {[key: string]: {[key: string]: number}};

   constructor() {
    this.nodes = [];
    this.adjacencyList = {};
    this.terminalNodes = [];
    this.originalTerminalNodes = [];
    this.adjacencyListTerminalNodes = {};
   } 

   addNode(node: string) {
    this.nodes.push(node);
    this.adjacencyList[node] = {};
   }

    addTerminalNode(node: string): void {
    this.terminalNodes.push(node);
    this.originalTerminalNodes.push(node);
    this.adjacencyListTerminalNodes[node] = {};
   }

   getTerminalNodes(): string[] {
    return this.terminalNodes;
   }

   getOriginalTerminalNodes(): string[] {
    return this.originalTerminalNodes;
   }

   addEdge(startNode: string, endNode: string, edgeWeight: number)
   {
        this.adjacencyList[startNode][endNode] = edgeWeight;
   }

   showNodes(): string[] {
    return this.nodes;
   }

   showEdges(): {[key: string]: {[key: string]: number}} {
    return this.adjacencyList;
   }

   showTerminalEdges(): {[key: string]: {[key: string]: number}} {
    return this.adjacencyListTerminalNodes;
   }

    resetTerminalEdges(): void {
        for(let node in this.adjacencyListTerminalNodes) {
            this.adjacencyListTerminalNodes[node] = {};
        }
    }

   dijkstraStep1(sourceNode: string) {
    let visitedNodes = new Set<String>();
    let distancesToNodes: {[key: string]: number} = {};
   
    //Step 1: Initialize the distancesToNodes object based on the sourceNode
    //   sourceNode gets the value of 0 (because the distance to it is known) and the other  nodes 
    //   get the value Infinity (because the distance from source node to them is unknown)

        this.nodes.forEach((node: string) => {
            if(node === sourceNode)
            {
                distancesToNodes[sourceNode] = 0;
            }
            else {
                distancesToNodes[node] = Infinity;
            }
        });

    //Step 2: Find in the distancesToNodes object the node with the lowest weight based on 
    //        the visited Set
    // Obs:   Take into account the visited Set !!!

    let currentNode: string = this.findLowestWeightNodeStep1(distancesToNodes,visitedNodes);

    while(currentNode !== "") {

    //Step 3: Update the weights of the edges of the adjacent nodes of the current node
    //         weight = current Node Weight + Edge Weight;
    //         if the node already has a value, assign to it only if the value is lower     

    let currentNodeWeight = distancesToNodes[currentNode];
    let adjacentNodes = this.adjacencyList[currentNode];
    for(let node in adjacentNodes)
    {
        let newDistanceOfAdjacentNode = currentNodeWeight + adjacentNodes[node];

        if(distancesToNodes[node] > newDistanceOfAdjacentNode)
        {
            distancesToNodes[node] = newDistanceOfAdjacentNode;
        }
    }

    //Step 4: Mark the current Node as visited after updating the edges(distances) of its adjacent nodes 
    visitedNodes.add(currentNode);

    //Step 5: Repeat Steps 2,3,4 until there is no node to visit 
    currentNode = this.findLowestWeightNodeStep1(distancesToNodes,visitedNodes);
    }

    this.showResultStep1(distancesToNodes,sourceNode);
   }

   private showResultStep1(distances: {[key: string]: number}, sourceNode: string): void {
        console.log(`SOURCE NODE:  ${sourceNode}`);
        for(let node in distances) {
            if(this.terminalNodes.includes(node) && node !== sourceNode)
            { // Builds The Complex Graph at Step 1
            this.adjacencyListTerminalNodes[sourceNode][node] = distances[node];  
            console.log(`The distance from ${sourceNode} to ${node} is: `, distances[node]);
            }
        }
   }

   private findLowestWeightNodeStep1(distanceObject: {[key: string]: number}, visitedSet: Set<String>): string {
    let minWeight = Infinity;
    let minNode = "";
    for(let node in distanceObject)
    {
        if(!visitedSet.has(node) && distanceObject[node] < minWeight) {
            minNode = node;
            minWeight = distanceObject[node];
        }
    }
    return minNode;
   }

    primStep2(sourceNode: string): void {
    let MST: {[key: string]: number} = {};
    let parent: {[key: string]: string} = {};
    
    MST[sourceNode] = 0;
    parent[sourceNode] = "Source Node";

     //DEEP COPY otherwise it's just a reference to terminalNodes() and I will get unexpected behavior
    let terminalNodesCopy = JSON.parse(JSON.stringify(myGraph.getTerminalNodes()));

    terminalNodesCopy = terminalNodesCopy.filter((node: string) => {
        return node !== sourceNode;
    });

    while(terminalNodesCopy.length) {
        let minimumDistance: number = Infinity;
        
        let closestNode: string = "";
        
        for(let mstNode in MST) {
            let adjacentNodes = this.adjacencyListTerminalNodes[mstNode];
            for(let adjacentNode in adjacentNodes) {
                if(adjacentNodes[adjacentNode] < minimumDistance && !Object.keys(MST).includes(adjacentNode))
                {
                    minimumDistance = adjacentNodes[adjacentNode];
                    closestNode = adjacentNode;
                    parent[closestNode] = mstNode;
                }
            }
        }
            MST[closestNode] = minimumDistance;
            terminalNodesCopy = terminalNodesCopy.filter((node: string) => {
                return node !== closestNode;
            });
    }
    this.showResultMSTStep2(MST,parent);
  }

  private showResultMSTStep2(mst: {[key: string]: number}, parent: {[key: string]: string}): void {
        this.resetTerminalEdges();
        for(let node in parent)
        {   
            if(parent[node] === "Source Node")
            {
                console.log("Source Node: " + node);
            }
            else {
                console.log("Edge: " + parent[node] + '-->' + node + " weight is: " + mst[node]);
                //Build new adjacencyList of MST 
                this.adjacencyListTerminalNodes[node][parent[node]] = mst[node];
                this.adjacencyListTerminalNodes[parent[node]][node] = mst[node];
             
            }
        }
  }

  dijkstraStep3(sourceNode: string, endNode: string) {
    let visitedNodes = new Set<string>();
    let distancesToNodes: {[key: string]: number} = {};
    let parent: {[key: string]: string | null} = {};

    // Step 1: Initialize distancesToNodes object and predecessors
    this.nodes.forEach((node: string) => {
        distancesToNodes[node] = node === sourceNode ? 0 : Infinity;
        parent[node] = null;
    });

    let currentNode: string = this.findLowestWeightNodeStep3(distancesToNodes, visitedNodes);

    while (currentNode !== "" && currentNode !== endNode) {
        // Step 3: Update weights of adjacent nodes
        let currentNodeWeight = distancesToNodes[currentNode];
        let adjacentNodes = this.adjacencyList[currentNode];
        
        for (let node in adjacentNodes) {
            let newDistanceOfAdjacentNode = currentNodeWeight + adjacentNodes[node];

            if (distancesToNodes[node] > newDistanceOfAdjacentNode) {
                distancesToNodes[node] = newDistanceOfAdjacentNode;
                parent[node] = currentNode;
            }
        }

        // Step 4: Mark the current Node as visited
        visitedNodes.add(currentNode);

        // Step 5: Find the next node
        currentNode = this.findLowestWeightNodeStep3(distancesToNodes, visitedNodes);
    }

    this.showResultStep3(distancesToNodes, parent, sourceNode, endNode);
}

private findLowestWeightNodeStep3(distanceObject: {[key: string]: number}, visitedSet: Set<String>): string {
    let minWeight = Infinity;
    let minNode = "";

    for (let node in distanceObject) {
        if (!visitedSet.has(node) && distanceObject[node] < minWeight) {
            minNode = node;
            minWeight = distanceObject[node];
        }
    }

    return minNode;
}

private showResultStep3(distances: {[key: string]: number}, parent: {[key: string]: string | null}, sourceNode: string, endNode: string): void {
    console.log(`SOURCE NODE: ${sourceNode}`);
    console.log(`END NODE: ${endNode}`);
    console.log(`The distance from ${sourceNode} to ${endNode} is: `, distances[endNode]);
    
    // Reconstruct the path
    let path: string[] = [];
    let current: any = endNode;
    while (current !== null) {
        path.unshift(current);
        current = parent[current];
    }

    console.log("Shortest path:", path.join(" -> "));



	//Build the new graph obtained through doing Dijkstra on each route of the previous graph on the first Graph
    for(let i = 0 ; i < path.length - 1 ; i ++) {
        const currentNode = path[i];
        const nextNode = path[i + 1];

        // Ensure the current node exists in adjacencyListTerminalNodes
        if (!this.adjacencyListTerminalNodes[currentNode]) {
            this.adjacencyListTerminalNodes[currentNode] = {};
        }

        // Set the property for the edge
        this.adjacencyListTerminalNodes[currentNode][nextNode] = distances[nextNode] - distances[currentNode];
    }
}

  public computeTotalCost() {
    let totalCost = 0;
    const visitedEdges = new Set();

    for (let node in this.adjacencyListTerminalNodes) {
      const edges = this.adjacencyListTerminalNodes[node];

      for (let neighbor in edges) {
        const edgeKey = [node, neighbor].sort().join("-");

        // Check if the edge has been visited
        if (!visitedEdges.has(edgeKey)) {
          totalCost += edges[neighbor];
          visitedEdges.add(edgeKey);
        }
      }
    }

    return totalCost;
  }

}

const myGraph = new Graph();

//Add the nodes of the Graph
myGraph.addNode("1");
myGraph.addNode("2");
myGraph.addNode("3");
myGraph.addNode("4");
myGraph.addNode("5");
myGraph.addNode("6");
myGraph.addNode("7");
myGraph.addNode("8");
myGraph.addNode("9");
myGraph.addNode("10");
myGraph.addNode("11");
myGraph.addNode("12");

//Add terminal nodes
myGraph.addTerminalNode("2");
myGraph.addTerminalNode("3");
myGraph.addTerminalNode("6");
myGraph.addTerminalNode("8");
myGraph.addTerminalNode("9");
myGraph.addTerminalNode("11");

//Add the edges of the graph (relationships between the nodes)
myGraph.addEdge("1","2",10);
myGraph.addEdge("1","5",40);
myGraph.addEdge("1","6",30);

myGraph.addEdge("2","1",10);
myGraph.addEdge("2","6",50);
myGraph.addEdge("2","3",20);

myGraph.addEdge("3","2",20);
myGraph.addEdge("3","6",80);
myGraph.addEdge("3","7",40);
myGraph.addEdge("3","4",70);

myGraph.addEdge("4","3",70);
myGraph.addEdge("4","7",90);
myGraph.addEdge("4","8",80);

myGraph.addEdge("5","1",40);
myGraph.addEdge("5","6",20);
myGraph.addEdge("5","9",35);
myGraph.addEdge("5","10",70);

myGraph.addEdge("6","1",30);
myGraph.addEdge("6","2",50);
myGraph.addEdge("6","3",80);
myGraph.addEdge("6","7",25);
myGraph.addEdge("6","10",20);
myGraph.addEdge("6","5",20);

myGraph.addEdge("7","6",25);
myGraph.addEdge("7","3",40);
myGraph.addEdge("7","4",90);
myGraph.addEdge("7","8",30);
myGraph.addEdge("7","12",70);
myGraph.addEdge("7","11",30);
myGraph.addEdge("7","10",50);

myGraph.addEdge("8","7",30);
myGraph.addEdge("8","4",80);
myGraph.addEdge("8","12",50);

myGraph.addEdge("9","5",35);
myGraph.addEdge("9","10",40);

myGraph.addEdge("10","9",40);
myGraph.addEdge("10","5",70);
myGraph.addEdge("10","6",20);
myGraph.addEdge("10","7",50);
myGraph.addEdge("10","11",25);

myGraph.addEdge("11","10",25);
myGraph.addEdge("11","7",30);
myGraph.addEdge("11","12",60);

myGraph.addEdge("12","11",60);
myGraph.addEdge("12","7",70);
myGraph.addEdge("12","8",50);



//Step 1 Apply Dijkstra on each terminal node of the graph and 
//build the new graph
console.log("---------------------------STEP 1------------------")
myGraph.getTerminalNodes().forEach((terminalNode) => {
myGraph.dijkstraStep1(terminalNode);
console.log("***************************************************");
});

console.log("-------------------Adjacency List New Graph--------")
console.log(myGraph.showTerminalEdges());

//Step 2 
console.log("***************************************************");
console.log("---------------------------STEP 2------------------")
console.log("-----------------MST-------------------------------")
myGraph.primStep2("2");
console.log("***************************************************");
console.log("-----------------new graph MST-------------------------------")
console.log(myGraph.showTerminalEdges());

//Step 3
//Do again dijkstra for each connection of the new Graph in the 
//old graph (first graph that helped me build the current graph)
console.log("***************************************************");
console.log("---------------------------STEP 3------------------")
console.log("---------Find for each route the shortest path in the original graph------------------")
//I needed to do a DEEP COPY HERE, because otherwise I had a reference 
var copyTerminalEdges = JSON.parse(JSON.stringify(myGraph.showTerminalEdges()));
myGraph.resetTerminalEdges();
for(let node in copyTerminalEdges) {
    let sourceNode = node;
    for(let adjacentNode in copyTerminalEdges[node]) {
        let endNode = adjacentNode;
        myGraph.dijkstraStep3(sourceNode,endNode);
        console.log("***************************************************");
    }
}
console.log("---------The new obtained graph edges adjacent List------------------")
console.error(myGraph.showTerminalEdges());


console.error("TERMINAL NODS: ", myGraph.getTerminalNodes());
//Update terminal nodes 
for(let node in myGraph.showTerminalEdges()) {
    if(!myGraph.getTerminalNodes().includes(node)) {
        myGraph.getTerminalNodes().push(node);
    }
}
//Order terminal nodes 
myGraph.getTerminalNodes().sort((a: any,b: any) => { return a - b});
console.error("Terminal Nodes Udpated: ", myGraph.getTerminalNodes());
console.error("Original TERMINAL NODES: ", myGraph.getOriginalTerminalNodes());

//Step 4
//Optimizing again by finding the MST of the new obtained Graph
console.log("***************************************************");
console.log("---------------------------STEP 4------------------")
console.log("-----------------MST-------------------------------")
myGraph.primStep2("6"); // Tell teacher that for calue 2  as root 
// i lose a value because of the [6,5] and [2,3] edges which have the 
//same weight
console.log("***************************************************");
console.log("-----------------new graph MST-------------------------------")
console.log(myGraph.showTerminalEdges());

//In this case is the previous subgraph because the graph is a tree.

//OriginTerminalNodes is for Step 5
console.log("---------------------------STEP 5------------------")
console.log("-----------------Remove leaf nodes that do not belong to terminal nodes-------------------------------")
//Get rid of the nodes that represent a leaf but are not terminal.
for(let [key,value] of Object.entries(myGraph.showTerminalEdges()))
{
    if(!myGraph.getOriginalTerminalNodes().includes(key) && Object.keys(value).length === 1) {
        delete myGraph.showTerminalEdges()[key];
    }
}
console.log("------------------Final Graph----------------")
console.log(myGraph.showTerminalEdges());
console.log("-------------------Steiner Graph total cost: ",myGraph.computeTotalCost());


